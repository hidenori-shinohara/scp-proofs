#lang ivy1.7



object node = {

    # It does not make much sense to talk about
    # a network containing only one node.
    axiom exists X:id_t, Y. X ~= Y

    relation member(X:id_t, S:set_t)
    axiom exists S. forall X. member(X, S)

    relation is_quorum(S:set_t)
    axiom (is_quorum(S) & is_quorum(T)) -> (exists NODE_IN_S_AND_T. node.member(NODE_IN_S_AND_T, S) & node.member(NODE_IN_S_AND_T, T))
    axiom (forall X. member(X, S)) -> is_quorum(S)

    relation is_quorum_of(S:set_t, X:id_t)
    definition is_quorum_of(S, X) = is_quorum(S) & member(X, S)

    relation is_v_blocking(X:id_t, S:set_t)
    definition is_v_blocking(X, S) = member(X, S) | forall T. is_quorum(T) -> (exists NODE_IN_T_AND_S. node.member(NODE_IN_T_AND_S, T) & node.member(NODE_IN_T_AND_S, S))


    # These relations are state variables, and will
    # be updated during actions below.
    relation voted(SELF:id_t, VAL:val_t)
    relation accepted(SELF:id_t, VAL:val_t)
    relation confirmed(SELF:id_t, VAL:val_t)
    relation heard_vote(SELF:id_t, SRC:id_t, VAL:val_t)
    relation heard_accept(SELF:id_t, SRC:id_t, VAL:val_t)

    after init {
        voted (SELF, VAL) := false;
        accepted(SELF, VAL) := false;
        confirmed(SELF, VAL) := false;
        heard_vote(SELF, SRC, VAL) := false;
        heard_accept(SELF, SRC, VAL) := false;
    }

    action vote(self_id:id_t, val:val_t) =
    {
        require ~voted(self_id, val);
        voted(self_id, val) := true;
        heard_vote(self_id, self_id, val) := true;
        if (~node.accepted(self_id, val) & ((exists QUORUM_OF_self_id. (node.is_quorum(QUORUM_OF_self_id) & node.member(self_id, QUORUM_OF_self_id) & (forall NODE_IN_QUORUM_OF_self_id. node.member(NODE_IN_QUORUM_OF_self_id, QUORUM_OF_self_id) -> node.heard_vote(self_id, NODE_IN_QUORUM_OF_self_id, val) | node.heard_accept(self_id, NODE_IN_QUORUM_OF_self_id, val)))) | (exists SET_BLOCKING_self_id.  (node.is_v_blocking(self_id, SET_BLOCKING_self_id) & (forall NODE_IN_SET_BLOCKING_self_id. node.member(NODE_IN_SET_BLOCKING_self_id, SET_BLOCKING_self_id) -> node.heard_accept(self_id, NODE_IN_SET_BLOCKING_self_id, val)))))) {
            node.accepted(self_id, val) := true;
            node.heard_accept(self_id, self_id, val) := true;
        };
        if (~node.confirmed(self_id, val) & exists QUORUM_OF_self_id. (node.is_quorum(QUORUM_OF_self_id) & node.member(self_id, QUORUM_OF_self_id) & (forall NODE_IN_QUORUM_OF_self_id. node.member(NODE_IN_QUORUM_OF_self_id, QUORUM_OF_self_id) -> node.heard_accept(self_id, NODE_IN_QUORUM_OF_self_id, val)))) {
            node.confirmed(self_id, val) := true;
        };
    }

    action recv_vote(self_id:id_t, src:id_t, val:val_t) =
    {
        heard_vote(self_id, src, val) := true;
        if (~node.accepted(self_id, val) & ((exists QUORUM_OF_self_id. (node.is_quorum(QUORUM_OF_self_id) & node.member(self_id, QUORUM_OF_self_id) & (forall NODE_IN_QUORUM_OF_self_id. node.member(NODE_IN_QUORUM_OF_self_id, QUORUM_OF_self_id) -> node.heard_vote(self_id, NODE_IN_QUORUM_OF_self_id, val) | node.heard_accept(self_id, NODE_IN_QUORUM_OF_self_id, val)))) | (exists SET_BLOCKING_self_id.  (node.is_v_blocking(self_id, SET_BLOCKING_self_id) & (forall NODE_IN_SET_BLOCKING_self_id. node.member(NODE_IN_SET_BLOCKING_self_id, SET_BLOCKING_self_id) -> node.heard_accept(self_id, NODE_IN_SET_BLOCKING_self_id, val)))))) {
            node.accepted(self_id, val) := true;
            node.heard_accept(self_id, self_id, val) := true;
        };
        if (~node.confirmed(self_id, val) & exists QUORUM_OF_self_id. (node.is_quorum(QUORUM_OF_self_id) & node.member(self_id, QUORUM_OF_self_id) & (forall NODE_IN_QUORUM_OF_self_id. node.member(NODE_IN_QUORUM_OF_self_id, QUORUM_OF_self_id) -> node.heard_accept(self_id, NODE_IN_QUORUM_OF_self_id, val)))) {
            node.confirmed(self_id, val) := true;
        };
    }

    action recv_accept(self_id:id_t, src:id_t, val:val_t) =
    {
        heard_accept(self_id, src, val) := true;
        if (~node.accepted(self_id, val) & ((exists QUORUM_OF_self_id. (node.is_quorum(QUORUM_OF_self_id) & node.member(self_id, QUORUM_OF_self_id) & (forall NODE_IN_QUORUM_OF_self_id. node.member(NODE_IN_QUORUM_OF_self_id, QUORUM_OF_self_id) -> node.heard_vote(self_id, NODE_IN_QUORUM_OF_self_id, val) | node.heard_accept(self_id, NODE_IN_QUORUM_OF_self_id, val)))) | (exists SET_BLOCKING_self_id.  (node.is_v_blocking(self_id, SET_BLOCKING_self_id) & (forall NODE_IN_SET_BLOCKING_self_id. node.member(NODE_IN_SET_BLOCKING_self_id, SET_BLOCKING_self_id) -> node.heard_accept(self_id, NODE_IN_SET_BLOCKING_self_id, val)))))) {
            node.accepted(self_id, val) := true;
            node.heard_accept(self_id, self_id, val) := true;
        };
        if (~node.confirmed(self_id, val) & exists QUORUM_OF_self_id. (node.is_quorum(QUORUM_OF_self_id) & node.member(self_id, QUORUM_OF_self_id) & (forall NODE_IN_QUORUM_OF_self_id. node.member(NODE_IN_QUORUM_OF_self_id, QUORUM_OF_self_id) -> node.heard_accept(self_id, NODE_IN_QUORUM_OF_self_id, val)))) {
            node.confirmed(self_id, val) := true;
        };
    }
}

