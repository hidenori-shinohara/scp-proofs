#lang ivy1.7

object node = {
    # For some reason treating the following relation definitions as assignments in
    # an 'after init' block means that Ivy considers the possibility of the
    # relations having different values, when exploring possible prestates for
    # actions, though it seems like it should not.

    relation member(X:id_t, S:set_t)
    
    relation well_behaved(N:id_t)
    relation intertwined(N:id_t)
    relation intact(N:id_t)
    
    # intact nodes are intertwined
    axiom intact(N) -> intertwined(N)
    # intertwined nodes are well-behaved
    axiom intertwined(N) -> well_behaved(N)

    relation is_quorum(S:set_t)

    relation quorum_containing_intertwined_nodes(Q:set_t)
    definition quorum_containing_intertwined_nodes(Q) = exists V . intertwined(V) & is_quorum(Q) & member(V, Q)

    axiom (quorum_containing_intertwined_nodes(Q1) & quorum_containing_intertwined_nodes(Q2)) -> (exists N3 . well_behaved(N3) & member(N3, Q1) & member(N3, Q2))

    relation quorum_containing_intact_nodes(Q:set_t)
    definition quorum_containing_intact_nodes(Q) = exists V . intact(V) & is_quorum(Q) & member(V, Q)

    axiom quorum_containing_intact_nodes(Q1) & quorum_containing_intact_nodes(Q2) -> (exists N3 . intact(N3) & member(N3, Q1) & member(N3, Q2))

    relation is_v_blocking(V:id_t, S:set_t)

    axiom (exists V. intact(V) & is_v_blocking(V, S)) -> exists V2. member(V2, S) & intact(V2)

    axiom exists Q . (forall N . member(N, Q) <-> intact(N)) & is_quorum(Q)



    # These relations are state variables, and will
    # be updated during actions below.
    relation voted(SELF:id_t, VAL:val_t)
    relation accepted(SELF:id_t, VAL:val_t)
    relation confirmed(SELF:id_t, VAL:val_t)
    relation heard_vote(SELF:id_t, SRC:id_t, VAL:val_t)
    relation heard_accept(SELF:id_t, SRC:id_t, VAL:val_t)

    after init {
        voted (SELF, VAL) := false;
        accepted(SELF, VAL) := false;
        confirmed(SELF, VAL) := false;
        heard_vote(SELF, SRC, VAL) := false;
        heard_accept(SELF, SRC, VAL) := false;
    }

    # The remaining relations are definitions, used as
    # abbreviations inside logical formulas elsewhere.
    relation heard_set_vote_or_accept(SELF:id_t, SET:set_t, VAL:val_t)
    definition heard_set_vote_or_accept(SELF, S, VAL) =
        forall V. member(V, S) ->
            (
                heard_vote(SELF, V, VAL) |
                heard_accept(SELF, V, VAL)
            )

    relation heard_set_accept(SELF:id_t, SET:set_t, VAL:val_t)
    definition heard_set_accept(SELF, S, VAL) =
        forall V. member(V, S) -> heard_accept(SELF, V, VAL)

    relation accept_condition_1(SELF:id_t, VAL:val_t)
    definition accept_condition_1(SELF, VAL) =
        exists Q.
            (
                is_quorum(Q) &
                member(SELF, Q) &
                heard_set_vote_or_accept(SELF, Q, VAL)
            )

    # The definition allows a v-blocking set that contains v itself
    # to let v accept a value. However, it would never happen.
    relation accept_condition_2(SELF:id_t, VAL:val_t)
    definition accept_condition_2(SELF, VAL) =
        exists S.
            (
                is_v_blocking(SELF, S) &
                ~member(SELF, S) &
                heard_set_accept(SELF, S, VAL)
            )

    relation ready_to_accept_but_have_not_accepted(SELF:id_t, VAL:val_t)
    definition ready_to_accept_but_have_not_accepted(SELF, VAL) =
        ~accepted(SELF, VAL) &
        (accept_condition_1(SELF, VAL) |
	     accept_condition_2(SELF, VAL))

    relation ready_to_confirm_but_have_not_confirmed(SELF:id_t, VAL:val_t)
    definition ready_to_confirm_but_have_not_confirmed(SELF, VAL) =
        ~confirmed(SELF, VAL) &
        exists Q.
            (
                is_quorum(Q) &
                member(SELF, Q) &
                heard_set_accept(SELF, Q, VAL)
            )

    after init {
        voted(SELF, VAL) := false;
        accepted(SELF, VAL) := false;
        confirmed(SELF, VAL) := false;
        heard_vote(SELF, SRC, VAL) := false;
        heard_accept(SELF, SRC, VAL) := false;
    }

    relation every_intact_node_in_this_set_accepted(SET:set_t, VAL:val_t)
    definition every_intact_node_in_this_set_accepted(SET, VAL) = forall N. intact(N) & member(N, SET) -> accepted(N, VAL)

    relation accepted_by_every_intact_node(VAL:val_t)
    definition accepted_by_every_intact_node(VAL) = forall N. intact(N) -> accepted(N, VAL)

    relation only_contains_intact_nodes_that_accepted(SET:set_t, VAL:val_t)
    definition only_contains_intact_nodes_that_accepted(SET:set_t, VAL:val_t) = forall N. member(N, SET) -> intact(N) & accepted(N, VAL)

    individual v0:val_t
    individual q0:set_t

    action assume_cascade_theorem = {
        # the cascade theorem:
        # NOTE: the cascade theorem is a higher-order property that we cannot express in first-order logic. Instead, we instantiate it only when needed using assume statements in the transition system.
        # In English: if a set of nodes including a quorum of an intact node accepts val, then either all intact nodes accept val or there is an intact node blocked by a set of all the intact nodes that accept val.
        assume quorum_containing_intact_nodes(q0) & every_intact_node_in_this_set_accepted(q0, v0)
            -> (accepted_by_every_intact_node(v0) | (exists N2, S. intact(N2) & ~accepted(N2, v0) & is_v_blocking(N2, S) & only_contains_intact_nodes_that_accepted(S, v0)));
    }

    action vote(self_id:id_t, v:val_t) =
    {
        require ~voted(self_id, v);
        voted(self_id, v) := true;
        heard_vote(self_id, self_id, v) := true;
        if ready_to_accept_but_have_not_accepted(self_id, v) {
            accepted(self_id, v) := true;
            heard_accept(self_id, self_id, v) := true;
        };
        if ready_to_confirm_but_have_not_confirmed(self_id, v) {
            confirmed(self_id, v) := true;
        };
        call assume_cascade_theorem();
    }

    action recv_vote(self_id:id_t, src:id_t, val:val_t) =
    {
        heard_vote(self_id, src, val) := true;
        if ready_to_accept_but_have_not_accepted(self_id, val) {
            accepted(self_id, val) := true;
            heard_accept(self_id, self_id, val) := true;
        };
        if ready_to_confirm_but_have_not_confirmed(self_id, val) {
            confirmed(self_id, val) := true;
        };
        call assume_cascade_theorem();
    }

    action recv_accept(self_id:id_t, src:id_t, val:val_t) =
    {
        heard_accept(self_id, src, val) := true;
        if ready_to_accept_but_have_not_accepted(self_id, val) {
            accepted(self_id, val) := true;
            heard_accept(self_id, self_id, val) := true;
        };
        if ready_to_confirm_but_have_not_confirmed(self_id, val) {
            confirmed(self_id, val) := true;
        };
        call assume_cascade_theorem();
    }

    action byzantine_step = {
        voted(V, X) := *;
        assume forall V. (well_behaved(V) -> (forall X. voted(V, X) = old voted(V, X)));

        accepted(V, X) := *;
        assume forall V. (well_behaved(V) -> (forall X. accepted(V, X) = old accepted(V, X)));

        confirmed(V, X) := *;
        assume forall V. (well_behaved(V) -> (forall X. confirmed(V, X) = old confirmed(V, X)));

        heard_vote(SELF, SRC, VAL) := *;
        assume forall SELF. (well_behaved(SELF) -> (forall SRC, VAL. heard_vote(SELF, SRC, VAL) = old heard_vote(SELF, SRC, VAL)));

        heard_accept(SELF, SRC, VAL) := *;
        assume forall SELF. (well_behaved(SELF) -> (forall SRC, VAL. heard_accept(SELF, SRC, VAL) = old heard_accept(SELF, SRC, VAL)));
    }
}

